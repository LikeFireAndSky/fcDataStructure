function dijkstra(그래프, 시작정점) {
	// 찍고 찍고 찍고 가야할 위치의 수 (예를들어 서울 대구 대전 광주 부산이라면 5개))
	const 정점수 = 그래프.length;

	// 가지 않은 곳은 무한대로 설정
	// 시작 정점 외의 모든 정점에 대한 초기 거리가 무한대로 설정되면, 그래프의 모든 간선을 고려하지 않고도 알고리즘이 올바르게 작동
	// 만약 그래프의 특정 정점에 도달할 수 없는 경우, 해당 정점까지의 거리는 초기값인 무한대로 유지

	const 거리 = Array(정점수).fill(Infinity); // 시작 정점에서 각 정점까지의 최단 거리
	const 방문 = Array(정점수).fill(false); // 각 정점의 방문 여부

	const 지역이름 = ['서울', '원주', '포항', '수원', '대전', '여수'];

	거리[시작정점] = 0; // 시작 정점에서 자기 자신까지의 거리는 0 (나에서 나로 이동하니까)

	for (let i = 0; i < 정점수 - 1; i++) {
		// 정점수 - 1 만큼 반복 (예를들어 5개의 정점이면 4번 반복) -1을 하는 이유는 시작 정점은 이미 거리가 0이기 때문에
		let u = 최소거리찾기(거리, 방문);
		console.log(`다음 여행지로 ${지역이름[u]}를 선택함`);
		방문[u] = true;

		for (let v = 0; v < 정점수; v++) {
			if (!방문[v] && 그래프[u][v] !== 0 && 거리[u] !== Infinity && 거리[u] + 그래프[u][v] < 거리[v]) {
				console.log(
					`${지역이름[u]}에서 ${지역이름[v]}로 가는 거리를 파악해보자: ${
						거리[u] + 그래프[u][v]
					} (원래 거리: ${거리[v]})`,
				);
				거리[v] = 거리[u] + 그래프[u][v]; // 최단 거리 업데이트
			}
		}
		console.log('-------------------');
		console.log('거리: ', 거리);
		지역이름.forEach((지역, 인덱스) => console.log(`${지역}: ${거리[인덱스]}`));
		console.log('방문 방법을 확정 지은 곳: ', 방문);
		console.log('-------------------');
	}

	return 거리;
}

function 최소거리찾기(거리, 방문) {
	console.log('최소 거리 찾기 시작');
	let 최소값 = Infinity;
	let 최소인덱스 = -1; // 최소값을 가진 정점의 인덱스

	// 방문하지 않은 정점 중 최소 거리를 가진 정점을 찾는다.
	for (let v = 0; v < 거리.length; v++) {
		// 방문하지 않았고, 거리가 최소값보다 작으면
		if (방문[v] === false && 거리[v] <= 최소값) {
			// 최소값을 거리로 설정하고 최소인덱스를 v로 설정
			최소값 = 거리[v];
			최소인덱스 = v;
		} else {
		}
	}

	return 최소인덱스; // 방문하지 않은 정점 중 최소 거리를 가진 정점의 인덱스 반환
}

// 예제 사용법:
const 그래프 = [
	[0, 2, 5, 1, Infinity, Infinity],
	[2, 0, 3, 2, Infinity, Infinity],
	[5, 3, 0, 3, 1, 5],
	[1, 2, 3, 0, 1, Infinity],
	[Infinity, Infinity, 1, 1, 0, 2],
	[Infinity, Infinity, 5, Infinity, 2, 0],
];
const 시작정점 = 0;
const 최단거리 = dijkstra(그래프, 시작정점);
const 지역이름 = ['서울', '원주', '포항', '수원', '대전', '여수'];
console.log(`시작 정점(${지역이름[시작정점]})에서 다른 모든 정점까지의 최단 거리:`, 최단거리);
